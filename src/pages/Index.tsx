import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Badge } from '@/components/ui/badge';
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import Icon from '@/components/ui/icon';

const Index = () => {
  const [calculatorData, setCalculatorData] = useState({
    format: 'openbar',
    // Open Bar
    guests: 100,
    avg: 2500,
    feeCard: 0.025,
    feePartner: 0.15,
    // –ú–∏–Ω–∏–º–∞–ª–∫–∞
    min: 200000,
    // Revenue Share
    sharePartner: 0.35,
    // Fix-fee
    flat: 120000,
    // –ö–∞–ª—å—è–Ω
    hookahQty: 0,
    hookahPrice: 3000
  });

  const calculateResults = () => {
    const { guests, avg, feeCard, feePartner, min, sharePartner, flat, hookahQty, hookahPrice } = calculatorData;
    
    switch (calculatorData.format) {
      case 'openbar': {
        const revenue = guests * avg;
        const card = revenue * feeCard;
        const partner = revenue * feePartner;
        const net = revenue - card - partner;
        return { revenue, card, partner, net, avg };
      }
      case 'minimal': {
        const revenue = guests * avg;
        const delta = revenue - min;
        const topup = Math.max(delta, 0);
        const unspent = Math.max(-delta, 0);
        const card = revenue * feeCard;
        const partner = revenue * feePartner;
        const net = revenue - card - partner;
        return { revenue, topup, unspent, card, partner, net };
      }
      case 'revenue': {
        const revenue = guests * avg;
        const partner = revenue * sharePartner;
        const card = revenue * feeCard;
        const yourShare = revenue - partner - card;
        return { revenue, partner, card, yourShare };
      }
      case 'fixfee': {
        const projectPrice = flat;
        const perGuest = guests > 0 ? flat / guests : 0;
        return { projectPrice, perGuest };
      }
      case 'hookah': {
        const revenueHookah = hookahQty * hookahPrice;
        return { revenueHookah };
      }
      default:
        return {};
    }
  };

  const formatPrice = (price: number) => {
    return new Intl.NumberFormat('ru-RU').format(Math.round(price)) + ' ‚ÇΩ';
  };

  const applyPreset = (preset: string) => {
    const presets = {
      wedding: { guests: 80, avg: 3500 },
      corporate: { guests: 150, avg: 4000 },
      concert: { guests: 200, avg: 2000, sharePartner: 0.4 },
      minimal: { guests: 100, min: 250000, avg: 2500 },
      fixfee: { guests: 120, flat: 150000 }
    };
    
    if (presets[preset]) {
      setCalculatorData({ ...calculatorData, ...presets[preset] });
    }
  };

  return (
    <div className="min-h-screen bg-white overflow-x-hidden">
      {/* Hero —Å–µ–∫—Ü–∏—è */}
      <section className="relative bg-premium-black text-white py-32 px-2 sm:px-4">
        <div className="absolute inset-0 bg-gradient-to-br from-premium-black to-gray-900"></div>
        <div className="container mx-auto text-center relative z-10 max-w-4xl">
          <h1 className="text-5xl md:text-7xl font-bold mb-8 leading-tight">
            –í–∏–ø –±–∞—Ä-—Å–µ—Ä–≤–∏—Å –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
          </h1>
          <p className="text-xl md:text-2xl mb-12 text-gray-300 leading-relaxed">
            –ü—Ä–µ–º–∏–∞–ª—å–Ω—ã–π –∞–ª–∫–æ–≥–æ–ª—å –∏ –∞–≤—Ç–æ—Ä—Å–∫–∏–µ –∫–æ–∫—Ç–µ–π–ª–∏ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π
          </p>
          <div className="flex flex-col sm:flex-row gap-4 justify-center">
            <Button size="lg" className="bg-gold hover:bg-gold-dark text-premium-black font-semibold px-8 py-4 text-lg">
              –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å
            </Button>
            <Button size="lg" variant="outline" className="border-gold text-gold hover:bg-gold hover:text-premium-black font-semibold px-8 py-4 text-lg">
              –ü—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç
            </Button>
          </div>
        </div>
      </section>

      {/* –û –Ω–∞—Å —Å–µ–∫—Ü–∏—è */}
      <section className="py-20 bg-gray-50">
        <div className="container mx-auto px-2 sm:px-4">
          <div className="max-w-6xl mx-auto">
            <h2 className="text-4xl md:text-5xl font-bold text-center mb-16 text-premium-black">
              –ü–æ—á–µ–º—É –≤—ã–±–∏—Ä–∞—é—Ç –Ω–∞—Å
            </h2>
            <div className="grid md:grid-cols-3 gap-8">
              {[
                { icon: "Award", title: "–ü—Ä–µ–º–∏—É–º –∫–∞—á–µ—Å—Ç–≤–æ", desc: "–¢–æ–ª—å–∫–æ –ª–∏—Ü–µ–Ω–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–ª–∫–æ–≥–æ–ª—å –æ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤" },
                { icon: "Users", title: "–û–ø—ã—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", desc: "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –±–∞—Ä–º–µ–Ω—ã —Å –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã –Ω–∞ VIP-–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö" },
                { icon: "Clock", title: "–¢–æ—á–Ω–æ—Å—Ç—å –≤ —Å—Ä–æ–∫–∞—Ö", desc: "–í—Å–µ–≥–¥–∞ –ø—Ä–∏–µ–∑–∂–∞–µ–º –≤–æ–≤—Ä–µ–º—è –∏ —Ä–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –∑–∞–¥–µ—Ä–∂–µ–∫" }
              ].map((item, index) => (
                <Card key={index} className="text-center hover:shadow-xl transition-shadow border-0 bg-white">
                  <CardHeader>
                    <div className="flex justify-center mb-4">
                      <Icon name={item.icon} size={48} className="text-gold" />
                    </div>
                    <CardTitle className="text-xl font-semibold text-premium-black">{item.title}</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <p className="text-gray-600">{item.desc}</p>
                  </CardContent>
                </Card>
              ))}
            </div>
          </div>
        </div>
      </section>

      {/* –¢–∏–ø—ã –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π */}
      <section className="py-20 bg-white">
        <div className="container mx-auto px-2 sm:px-4">
          <h2 className="text-4xl md:text-5xl font-bold text-center mb-16 text-premium-black">
            –†–∞–±–æ—Ç–∞–µ–º —Å –ª—é–±—ã–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏
          </h2>
          <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-6 max-w-6xl mx-auto">
            {[
              { emoji: "üèõ", title: "–ü–ª–æ—â–∞–¥–∫–∏/–ª–æ—Ñ—Ç—ã", desc: "–¥–æ–º–∞—à–Ω–∏–π –±–∞—Ä-–ø–∞—Ä—Ç–Ω—ë—Ä —Å –∫–æ–º–∏—Å—Å–∏–µ–π" },
              { emoji: "üé∂", title: "–ö–æ–Ω—Ü–µ—Ä—Ç—ã/—Ñ–µ—Å—Ç–∏–≤–∞–ª–∏", desc: "revenue-share, wristband-—Å–∏—Å—Ç–µ–º–∞" },
              { emoji: "üè¢", title: "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤—ã –∏ MICE", desc: "–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ –ø–∞–∫–µ—Ç—ã, —Ä–∞–±–æ—Ç–∞ –ø–æ –±–µ–∑–Ω–∞–ª—É" },
              { emoji: "üíç", title: "–°–≤–∞–¥—å–±—ã/–≤–µ—á–µ—Ä–∏–Ω–∫–∏", desc: "—Å—Ç–∏–ª—å, –∞–≤—Ç–æ—Ä—Å–∫–∏–µ –∫–æ–∫—Ç–µ–π–ª–∏, –∫–∞–ª—å—è–Ω-–∑–æ–Ω–∞" }
            ].map((item, index) => (
              <Card key={index} className="hover:shadow-xl transition-shadow border-0 bg-white">
                <CardHeader className="text-center">
                  <div className="text-4xl mb-4">{item.emoji}</div>
                  <CardTitle className="text-xl font-semibold text-premium-black">{item.title}</CardTitle>
                </CardHeader>
                <CardContent>
                  <p className="text-gray-600 text-center">{item.desc}</p>
                </CardContent>
              </Card>
            ))}
          </div>
        </div>
      </section>

      {/* –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏ */}
      <section className="py-20 bg-white">
        <div className="container mx-auto px-2 sm:px-4 w-full max-w-full">
          <h2 className="text-4xl md:text-5xl font-bold text-center mb-16 text-premium-black">
            5 –º–æ–¥–µ–ª–µ–π —Ä–∞–±–æ—Ç—ã –ø–æ–¥ –≤–∞—à–∏ –∑–∞–¥–∞—á–∏
          </h2>
          <div className="max-w-4xl mx-auto px-1 sm:px-0">
            <Card className="p-4 sm:p-8 border-2 border-gold/20 shadow-2xl">
              <CardHeader className="text-center">
                <CardTitle className="text-2xl text-premium-black mb-8">–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏</CardTitle>
                <div className="flex flex-wrap gap-2 justify-center">
                  <Button variant="outline" size="sm" onClick={() => applyPreset('wedding')}>
                    –°–≤–∞–¥—å–±–∞
                  </Button>
                  <Button variant="outline" size="sm" onClick={() => applyPreset('corporate')}>
                    –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤
                  </Button>
                  <Button variant="outline" size="sm" onClick={() => applyPreset('concert')}>
                    –ö–æ–Ω—Ü–µ—Ä—Ç
                  </Button>
                  <Button variant="outline" size="sm" onClick={() => applyPreset('minimal')}>
                    –ú–∏–Ω–∏–º–∞–ª–∫–∞
                  </Button>
                </div>
              </CardHeader>
              <CardContent>
                <Tabs value={calculatorData.format} onValueChange={(value) => setCalculatorData({...calculatorData, format: value})}>
                  <TabsList className="grid w-full grid-cols-2 sm:grid-cols-5 mb-8">
                    <TabsTrigger value="openbar">Open Bar</TabsTrigger>
                    <TabsTrigger value="minimal">–ú–∏–Ω–∏–º–∞–ª–∫–∞</TabsTrigger>
                    <TabsTrigger value="revenue">Revenue</TabsTrigger>
                    <TabsTrigger value="fixfee">Fix-fee</TabsTrigger>
                    <TabsTrigger value="hookah">–ö–∞–ª—å—è–Ω</TabsTrigger>
                  </TabsList>
                  
                  <TabsContent value="openbar">
                    <div className="grid md:grid-cols-2 gap-6">
                      <div className="space-y-4">
                        <div>
                          <Label htmlFor="guests" className="text-base font-medium">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π (G)</Label>
                          <Input
                            id="guests"
                            type="number"
                            value={calculatorData.guests}
                            onChange={(e) => setCalculatorData({...calculatorData, guests: parseInt(e.target.value) || 0})}
                            className="mt-2"
                          />
                        </div>
                        <div>
                          <Label htmlFor="avg" className="text-base font-medium">–°—Ä–µ–¥–Ω–∏–π —á–µ–∫ (‚ÇΩ)</Label>
                          <Input
                            id="avg"
                            type="number"
                            value={calculatorData.avg}
                            onChange={(e) => setCalculatorData({...calculatorData, avg: parseFloat(e.target.value) || 0})}
                            className="mt-2"
                          />
                        </div>
                        <div>
                          <Label htmlFor="feeCard" className="text-base font-medium">–ö–æ–º–∏—Å—Å–∏—è –∫–∞—Ä—Ç (%)</Label>
                          <Input
                            id="feeCard"
                            type="number"
                            step="0.001"
                            value={calculatorData.feeCard * 100}
                            onChange={(e) => setCalculatorData({...calculatorData, feeCard: parseFloat(e.target.value) / 100 || 0})}
                            className="mt-2"
                          />
                        </div>
                        <div>
                          <Label htmlFor="feePartner" className="text-base font-medium">–ö–æ–º–∏—Å—Å–∏—è –ø–∞—Ä—Ç–Ω—ë—Ä–∞ (%)</Label>
                          <Input
                            id="feePartner"
                            type="number"
                            step="0.001"
                            value={calculatorData.feePartner * 100}
                            onChange={(e) => setCalculatorData({...calculatorData, feePartner: parseFloat(e.target.value) / 100 || 0})}
                            className="mt-2"
                          />
                        </div>
                      </div>
                      
                      <div className="bg-gold/10 p-6 rounded-lg">
                        <h3 className="font-semibold mb-4">–†–∞—Å—á—ë—Ç:</h3>
                        {(() => {
                          const results = calculateResults();
                          return (
                            <div className="space-y-2">
                              <div className="flex justify-between">
                                <span>–í–∞–ª–æ–≤–∞—è –≤—ã—Ä—É—á–∫–∞:</span>
                                <span className="font-semibold">{formatPrice(results.revenue || 0)}</span>
                              </div>
                              <div className="flex justify-between">
                                <span>–ö–æ–º–∏—Å—Å–∏—è –∫–∞—Ä—Ç:</span>
                                <span className="text-red-600">-{formatPrice(results.card || 0)}</span>
                              </div>
                              <div className="flex justify-between">
                                <span>–ö–æ–º–∏—Å—Å–∏—è –ø–∞—Ä—Ç–Ω—ë—Ä–∞:</span>
                                <span className="text-red-600">-{formatPrice(results.partner || 0)}</span>
                              </div>
                              <hr className="my-2" />
                              <div className="flex justify-between text-lg font-bold">
                                <span>–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å:</span>
                                <span className="text-green-600">{formatPrice(results.net || 0)}</span>
                              </div>
                            </div>
                          );
                        })()}
                      </div>
                    </div>
                  </TabsContent>

                  <TabsContent value="minimal">
                    <div className="grid md:grid-cols-2 gap-6">
                      <div className="space-y-4">
                        <div>
                          <Label htmlFor="guests" className="text-base font-medium">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π (G)</Label>
                          <Input
                            id="guests"
                            type="number"
                            value={calculatorData.guests}
                            onChange={(e) => setCalculatorData({...calculatorData, guests: parseInt(e.target.value) || 0})}
                            className="mt-2"
                          />
                        </div>
                        <div>
                          <Label htmlFor="avg" className="text-base font-medium">–°—Ä–µ–¥–Ω–∏–π —á–µ–∫ (‚ÇΩ)</Label>
                          <Input
                            id="avg"
                            type="number"
                            value={calculatorData.avg}
                            onChange={(e) => setCalculatorData({...calculatorData, avg: parseFloat(e.target.value) || 0})}
                            className="mt-2"
                          />
                        </div>
                        <div>
                          <Label htmlFor="min" className="text-base font-medium">–ú–∏–Ω–∏–º–∞–ª–∫–∞ (‚ÇΩ)</Label>
                          <Input
                            id="min"
                            type="number"
                            value={calculatorData.min}
                            onChange={(e) => setCalculatorData({...calculatorData, min: parseFloat(e.target.value) || 0})}
                            className="mt-2"
                          />
                        </div>
                      </div>
                      
                      <div className="bg-gold/10 p-6 rounded-lg">
                        <h3 className="font-semibold mb-4">–†–∞—Å—á—ë—Ç:</h3>
                        {(() => {
                          const results = calculateResults();
                          return (
                            <div className="space-y-2">
                              <div className="flex justify-between">
                                <span>–í—ã—Ä—É—á–∫–∞:</span>
                                <span className="font-semibold">{formatPrice(results.revenue || 0)}</span>
                              </div>
                              <div className="flex justify-between">
                                <span>–î–æ–ø–ª–∞—Ç–∞ –∫ –º–∏–Ω–∏–º–∞–ª–∫–µ:</span>
                                <span className="text-green-600">{formatPrice(results.topup || 0)}</span>
                              </div>
                              <div className="flex justify-between">
                                <span>–ù–µ–≤—ã–±—Ä–∞–Ω–Ω–∞—è —á–∞—Å—Ç—å:</span>
                                <span className="text-orange-600">{formatPrice(results.unspent || 0)}</span>
                              </div>
                              <hr className="my-2" />
                              <div className="flex justify-between text-lg font-bold">
                                <span>–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å:</span>
                                <span className="text-green-600">{formatPrice(results.net || 0)}</span>
                              </div>
                            </div>
                          );
                        })()}
                      </div>
                    </div>
                  </TabsContent>

                  <TabsContent value="revenue">
                    <div className="grid md:grid-cols-2 gap-6">
                      <div className="space-y-4">
                        <div>
                          <Label htmlFor="guests" className="text-base font-medium">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π (G)</Label>
                          <Input
                            id="guests"
                            type="number"
                            value={calculatorData.guests}
                            onChange={(e) => setCalculatorData({...calculatorData, guests: parseInt(e.target.value) || 0})}
                            className="mt-2"
                          />
                        </div>
                        <div>
                          <Label htmlFor="avg" className="text-base font-medium">–°—Ä–µ–¥–Ω–∏–π —á–µ–∫ (‚ÇΩ)</Label>
                          <Input
                            id="avg"
                            type="number"
                            value={calculatorData.avg}
                            onChange={(e) => setCalculatorData({...calculatorData, avg: parseFloat(e.target.value) || 0})}
                            className="mt-2"
                          />
                        </div>
                        <div>
                          <Label htmlFor="sharePartner" className="text-base font-medium">–î–æ–ª—è –ø–∞—Ä—Ç–Ω—ë—Ä–∞ (%)</Label>
                          <Input
                            id="sharePartner"
                            type="number"
                            step="0.01"
                            value={calculatorData.sharePartner * 100}
                            onChange={(e) => setCalculatorData({...calculatorData, sharePartner: parseFloat(e.target.value) / 100 || 0})}
                            className="mt-2"
                          />
                        </div>
                      </div>
                      
                      <div className="bg-gold/10 p-6 rounded-lg">
                        <h3 className="font-semibold mb-4">–†–∞—Å—á—ë—Ç:</h3>
                        {(() => {
                          const results = calculateResults();
                          return (
                            <div className="space-y-2">
                              <div className="flex justify-between">
                                <span>–í–∞–ª–æ–≤–∞—è –≤—ã—Ä—É—á–∫–∞:</span>
                                <span className="font-semibold">{formatPrice(results.revenue || 0)}</span>
                              </div>
                              <div className="flex justify-between">
                                <span>–î–æ–ª—è –ø–∞—Ä—Ç–Ω—ë—Ä–∞:</span>
                                <span className="text-red-600">-{formatPrice(results.partner || 0)}</span>
                              </div>
                              <div className="flex justify-between">
                                <span>–ö–æ–º–∏—Å—Å–∏—è –∫–∞—Ä—Ç:</span>
                                <span className="text-red-600">-{formatPrice(results.card || 0)}</span>
                              </div>
                              <hr className="my-2" />
                              <div className="flex justify-between text-lg font-bold">
                                <span>–í–∞—à–∞ –¥–æ–ª—è:</span>
                                <span className="text-green-600">{formatPrice(results.yourShare || 0)}</span>
                              </div>
                            </div>
                          );
                        })()}
                      </div>
                    </div>
                  </TabsContent>

                  <TabsContent value="fixfee">
                    <div className="grid md:grid-cols-2 gap-6">
                      <div className="space-y-4">
                        <div>
                          <Label htmlFor="flat" className="text-base font-medium">–§–∏–∫—Å –ø—Ä–æ–µ–∫—Ç–∞ (‚ÇΩ)</Label>
                          <Input
                            id="flat"
                            type="number"
                            value={calculatorData.flat}
                            onChange={(e) => setCalculatorData({...calculatorData, flat: parseFloat(e.target.value) || 0})}
                            className="mt-2"
                          />
                        </div>
                        <div>
                          <Label htmlFor="guests" className="text-base font-medium">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</Label>
                          <Input
                            id="guests"
                            type="number"
                            value={calculatorData.guests}
                            onChange={(e) => setCalculatorData({...calculatorData, guests: parseInt(e.target.value) || 0})}
                            className="mt-2"
                          />
                        </div>
                      </div>
                      
                      <div className="bg-gold/10 p-6 rounded-lg">
                        <h3 className="font-semibold mb-4">–†–∞—Å—á—ë—Ç:</h3>
                        {(() => {
                          const results = calculateResults();
                          return (
                            <div className="space-y-2">
                              <div className="flex justify-between text-lg font-bold">
                                <span>–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞:</span>
                                <span className="text-green-600">{formatPrice(results.projectPrice || 0)}</span>
                              </div>
                              {calculatorData.guests > 0 && (
                                <div className="flex justify-between">
                                  <span>–ó–∞ –≥–æ—Å—Ç—è:</span>
                                  <span className="font-semibold">{formatPrice(results.perGuest || 0)}</span>
                                </div>
                              )}
                            </div>
                          );
                        })()}
                      </div>
                    </div>
                  </TabsContent>

                  <TabsContent value="hookah">
                    <div className="grid md:grid-cols-2 gap-6">
                      <div className="space-y-4">
                        <div>
                          <Label htmlFor="hookahQty" className="text-base font-medium">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª—å—è–Ω–æ–≤</Label>
                          <Input
                            id="hookahQty"
                            type="number"
                            value={calculatorData.hookahQty}
                            onChange={(e) => setCalculatorData({...calculatorData, hookahQty: parseInt(e.target.value) || 0})}
                            className="mt-2"
                          />
                        </div>
                        <div>
                          <Label htmlFor="hookahPrice" className="text-base font-medium">–¶–µ–Ω–∞ –∑–∞ –∫–∞–ª—å—è–Ω (‚ÇΩ)</Label>
                          <Input
                            id="hookahPrice"
                            type="number"
                            value={calculatorData.hookahPrice}
                            onChange={(e) => setCalculatorData({...calculatorData, hookahPrice: parseFloat(e.target.value) || 0})}
                            className="mt-2"
                          />
                        </div>
                      </div>
                      
                      <div className="bg-gold/10 p-6 rounded-lg">
                        <h3 className="font-semibold mb-4">–†–∞—Å—á—ë—Ç:</h3>
                        {(() => {
                          const results = calculateResults();
                          return (
                            <div className="space-y-2">
                              <div className="flex justify-between text-lg font-bold">
                                <span>–í—ã—Ä—É—á–∫–∞ –æ—Ç –∫–∞–ª—å—è–Ω–æ–≤:</span>
                                <span className="text-green-600">{formatPrice(results.revenueHookah || 0)}</span>
                              </div>
                            </div>
                          );
                        })()}
                      </div>
                    </div>
                  </TabsContent>
                  
                  <div className="text-center mt-8">
                    <Button className="bg-gold hover:bg-gold-dark text-premium-black w-full sm:w-auto">
                      –ü–æ–ª—É—á–∏—Ç—å —Ç–æ—á–Ω—É—é —Å–º–µ—Ç—É
                    </Button>
                  </div>
                </Tabs>
              </CardContent>
            </Card>
          </div>
        </div>
      </section>

      {/* FAQ */}
      <section className="py-20 bg-gray-50">
        <div className="container mx-auto px-2 sm:px-4">
          <div className="max-w-4xl mx-auto">
            <h2 className="text-4xl md:text-5xl font-bold text-center mb-16 text-premium-black">
              –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã
            </h2>
            <Accordion type="single" collapsible className="w-full space-y-4">
              <AccordionItem value="item-1" className="bg-white rounded-lg px-6">
                <AccordionTrigger className="text-left hover:no-underline">
                  –ö–∞–∫–æ–π –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑?
                </AccordionTrigger>
                <AccordionContent>
                  –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 80 000 —Ä—É–±–ª–µ–π –∏–ª–∏ 50 —á–µ–ª–æ–≤–µ–∫. –≠—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å—é –ø–æ–∫—Ä—ã—Ç–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ.
                </AccordionContent>
              </AccordionItem>

              <AccordionItem value="item-2" className="bg-white rounded-lg px-6">
                <AccordionTrigger className="text-left hover:no-underline">
                  –ó–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –Ω—É–∂–Ω–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å?
                </AccordionTrigger>
                <AccordionContent>
                  –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞ 2-3 –Ω–µ–¥–µ–ª–∏ –¥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è. –í –≤—ã—Å–æ–∫–∏–π —Å–µ–∑–æ–Ω (–º–∞–π-—Å–µ–Ω—Ç—è–±—Ä—å) –ª—É—á—à–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞ –º–µ—Å—è—Ü.
                </AccordionContent>
              </AccordionItem>

              <AccordionItem value="item-3" className="bg-white rounded-lg px-6">
                <AccordionTrigger className="text-left hover:no-underline">
                  –†–∞–±–æ—Ç–∞–µ—Ç–µ –ª–∏ –≤—ã —Å –±–µ–∑–Ω–∞–ª–∏—á–Ω—ã–º —Ä–∞—Å—á—ë—Ç–æ–º?
                </AccordionTrigger>
                <AccordionContent>
                  –î–∞, –º—ã —Ä–∞–±–æ—Ç–∞–µ–º –∫–∞–∫ —Å –Ω–∞–ª–∏—á–Ω—ã–º, —Ç–∞–∫ –∏ —Å –±–µ–∑–Ω–∞–ª–∏—á–Ω—ã–º —Ä–∞—Å—á—ë—Ç–æ–º. –î–ª—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π –ø–∞–∫–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.
                </AccordionContent>
              </AccordionItem>

              <AccordionItem value="item-4" className="bg-white rounded-lg px-6">
                <AccordionTrigger className="text-left hover:no-underline">
                  –ß—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤ —Å—Ç–æ–∏–º–æ—Å—Ç—å?
                </AccordionTrigger>
                <AccordionContent>
                  –í —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Ö–æ–¥–∏—Ç: –∞–ª–∫–æ–≥–æ–ª—å, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –±–∞—Ä–º–µ–Ω—ã, –±–∞—Ä–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ, –ª—ë–¥, —Ñ—Ä—É–∫—Ç—ã –¥–ª—è –∫–æ–∫—Ç–µ–π–ª–µ–π, –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è –ø–æ—Å—É–¥–∞, —É–±–æ—Ä–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ –º–µ—Å—Ç–∞.
                </AccordionContent>
              </AccordionItem>
            </Accordion>
          </div>
        </div>
      </section>

      {/* CTA —Å–µ–∫—Ü–∏—è */}
      <section className="py-20 bg-premium-black text-white">
        <div className="container mx-auto text-center px-2 sm:px-4">
          <h2 className="text-4xl md:text-5xl font-bold mb-8 leading-tight">
            –ì–æ—Ç–æ–≤—ã —Å–¥–µ–ª–∞—Ç—å –≤–∞—à–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–º?
          </h2>
          <p className="text-xl mb-12 text-gray-300 max-w-2xl mx-auto">
            –ü–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –∏ —Ç–æ—á–Ω—ã–π —Ä–∞—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å
          </p>
          <div className="flex flex-col sm:flex-row gap-4 justify-center">
            <Button size="lg" className="bg-gold hover:bg-gold-dark text-premium-black font-semibold px-8 py-4 text-lg">
              <Icon name="Phone" size={20} className="mr-2" />
              –ü–æ–∑–≤–æ–Ω–∏—Ç—å —Å–µ–π—á–∞—Å
            </Button>
            <Button size="lg" variant="outline" className="border-gold text-gold hover:bg-gold hover:text-premium-black font-semibold px-8 py-4 text-lg">
              <Icon name="MessageCircle" size={20} className="mr-2" />
              –ù–∞–ø–∏—Å–∞—Ç—å –≤ WhatsApp
            </Button>
          </div>
        </div>
      </section>

      {/* –§—É—Ç–µ—Ä */}
      <footer className="bg-gray-900 text-white py-12">
        <div className="container mx-auto px-2 sm:px-4">
          <div className="grid md:grid-cols-3 gap-8 text-center md:text-left">
            <div>
              <h3 className="text-xl font-bold mb-4 text-gold">–í–ò–ü –ë–∞—Ä –°–µ—Ä–≤–∏—Å</h3>
              <p className="text-gray-400">
                –ü—Ä–µ–º–∏–∞–ª—å–Ω–æ–µ –±–∞—Ä–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –¥–ª—è –æ—Å–æ–±—ã—Ö —Å–æ–±—ã—Ç–∏–π
              </p>
            </div>
            <div>
              <h3 className="text-xl font-bold mb-4">–ö–æ–Ω—Ç–∞–∫—Ç—ã</h3>
              <div className="space-y-2 text-gray-400">
                <p>+7 (999) 123-45-67</p>
                <p>info@vipbar.ru</p>
                <p>–ú–æ—Å–∫–≤–∞, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, 123</p>
              </div>
            </div>
            <div>
              <h3 className="text-xl font-bold mb-4">–£—Å–ª—É–≥–∏</h3>
              <div className="space-y-2 text-gray-400">
                <p>–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è</p>
                <p>–°–≤–∞–¥—å–±—ã –∏ —Ç–æ—Ä–∂–µ—Å—Ç–≤–∞</p>
                <p>–ß–∞—Å—Ç–Ω—ã–µ –≤–µ—á–µ—Ä–∏–Ω–∫–∏</p>
                <p>–§–µ—Å—Ç–∏–≤–∞–ª–∏ –∏ –∫–æ–Ω—Ü–µ—Ä—Ç—ã</p>
              </div>
            </div>
          </div>
          <div className="border-t border-gray-800 mt-8 pt-8 text-center text-gray-500">
            <p>&copy; 2024 –í–ò–ü –ë–∞—Ä –°–µ—Ä–≤–∏—Å. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.</p>
          </div>
        </div>
      </footer>
    </div>
  );
};

export default Index;